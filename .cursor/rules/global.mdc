---
alwaysApply: true
---
- 日本語でお願いします。


# トモタビ - 開発ガイドライン v2.0

## サービス名
トモタビ — 「お出かけ・旅行プランを1分で作って友達と共有」

## コンセプト
- 個人の視点で切り取ったまち・旅プランを交換できるルートSNS
- 友人グループやカップルのお出かけ、旅行者の週末散策にも
- 作成→共有→現地ナビ→完了→公開、を最短で回す

## プロジェクト概要
Next.js (App Router) + React + TypeScript + Tailwind CSS + MapLibre GL JS + Supabase を使用したスマートフォン向けPWAアプリケーション

## 技術スタック

### フロントエンド
- **Next.js 14** (App Router) - React フレームワーク
- **React 18** + TypeScript 5.2 - UI ライブラリと型安全性
- **Tailwind CSS 3.3** + PostCSS - スタイリング
- **React Icons 5.5** - SVGアイコンセット

### 地図・位置情報
- **MapLibre GL JS 3.6** - オープンソース地図ライブラリ
- **OSRM API** - 経路計算サービス (`router.project-osrm.org`)
- **Nominatim API** - 地名・住所検索 (`nominatim.openstreetmap.org`)
- **Overpass API** - POI・施設検索 (`overpass-api.de`)
- **Geolocation API** - ブラウザ標準の位置情報取得

### バックエンド・データ
- **Supabase 2.38** - BaaS (認証・DB・API)
- **PostgreSQL** - リレーショナルデータベース (Supabase経由)

### 開発環境・ツール
- **TypeScript** - 厳格な型チェック有効
- **ESLint** - Next.js推奨設定
- **HTTPS開発サーバー** - local-ssl-proxy + concurrently
- **パスエイリアス** - `@/*` で絶対パス指定可能

### 開発コマンド
```bash
npm run dev          # 開発サーバー起動
npm run dev:https    # HTTPS開発サーバー起動
npm run build        # プロダクションビルド
npm run lint         # ESLintチェック
```

## 共通開発ルール

### 🚫 コード変更・修正の厳格なルール
- **依頼されていない変更は絶対禁止**
  - 明示的に指示されていないコードやUI変更は一切行わない
  - 「ついで」や「改善のため」の変更も禁止
  - 指示された内容のみを忠実に実装する
- **危険・間違いの指摘義務**
  - ユーザーの指示に危険性や明らかな間違いがある場合は必ず助言する
  - セキュリティリスク、パフォーマンス問題、破壊的変更の可能性を指摘
  - 代替案や修正案を提案する
- **確認なしの判断禁止**
  - 曖昧な指示の場合は必ず確認を求める
  - 想定や推測での実装は行わない
  - 不明な点は質問してから作業を開始する

### 基本原則
- **1画面＝1ディレクトリ完結型設計** ⭐️ NEW ⚠️ **実装移行中**
  - 各画面は専用ディレクトリ内で完結
  - 画面単位での独立性を維持しつつ、適切にファイル分割
  - 外部画面との依存関係は最小限に留める
  - **注意**: 現在は移行期間中。勝手にファイル分割を行わず、明示的な指示を待つこと
- **ファイルサイズ制限** ⭐️ NEW
  - **メインコンポーネント**: 500行以下
  - **カスタムhooks**: 200行以下
  - **API関数**: 300行以下
  - **型定義**: 100行以下
- **関心の分離**
  - UI表示ロジック（コンポーネント）
  - ビジネスロジック（カスタムhooks）
  - データ取得・操作（API層）
  - 型定義・定数（設定ファイル）
- **依存関係最小化**
  - 外部ライブラリは最小限に留める
  - 地図表示はMapLibre GL JSのみ使用

### 推奨ディレクトリ構造
```
app/[screen]/
├── page.tsx (300-500行)      // メインコンポーネント（UI表示ロジックのみ）
├── hooks.ts (150-200行)      // カスタムhooks（状態管理・副作用）
├── api.ts (200-300行)        // API関数（データ取得・操作）
├── types.ts (50-100行)       // 型定義（画面固有の型）
├── constants.ts (30-50行)    // 定数・設定値
└── utils.ts (100行以下)      // ユーティリティ関数（必要に応じて）
```

### UI/UX設計

#### レイアウト
- **スマートフォン幅前提**: 375px〜430px
- **ヘッダー構成**:
  ```tsx
  <header className="fixed top-0 w-full z-50">
    {/* 画面タイトル */}
  </header>
  ```
- **フッター構成**:
  ```tsx
  <footer className="fixed bottom-0 w-full">
    {/* 主要CTAボタン */}
  </footer>
  ```
- **主要操作**: 片手親指で届く下部固定CTAエリアに配置

#### スタイリング
- **Tailwind CSS使用**
  - デフォルトカラーパレットのみ使用
  - 過度な装飾は禁止
  - 素朴で機能的なデザイン

#### カラールール
- **メインカラー**: `#2db5a5` - プライマリボタン、アクション要素、フォーカス状態
- **サブカラー**: `#f2b938` - セカンダリ要素、強調、バッジ
- **モノクロベース**: `gray-50`, `gray-100`, `gray-200`, `gray-300`, `gray-400`, `gray-500`, `gray-600`, `gray-700`, `gray-800`, `gray-900`, `white`, `black`
- **使用例**:
  ```tsx
  // メインカラー使用例
  style={{ backgroundColor: '#2db5a5' }}
  
  // ホバー効果（少し濃く）
  onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#239b8f'}
  
  // サブカラー使用例
  style={{ backgroundColor: '#f2b938' }}
  ```

#### アイコンルール
- **絵文字は禁止** - アプリ全体で絵文字は使用しない
- **SVGアイコン必須** - デザインの優れたSVGアイコンを使用する
- **推奨**: Heroicons、Lucide、Feather Icons等のアイコンセット
- **実装例**:
  ```tsx
  // ✅ 良い例
  <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
    <path d="M10 2L3 7v11a2 2 0 002 2h10a2 2 0 002-2V7l-7-5z"/>
  </svg>
  
  // ❌ 悪い例
  <span>🏠</span>
  ```

### アクセシビリティ
- 適切な`aria-label`の設定
- `role`属性の適用
- フォーカス管理の実装
- 日本語でのラベル記述

### 実装構成例（新ルール準拠）

#### ファイル分割パターン

**app/[screen]/types.ts**
```typescript
// 画面固有の型定義
export type PageData = {
  // ...
}

export type FormState = {
  // ...
}
```

**app/[screen]/api.ts**
```typescript
// API関数・データ取得
export const fetchPageData = async (): Promise<PageData> => {
  // Supabaseダミー呼び出し
  await new Promise(resolve => setTimeout(resolve, 1000))
  return DUMMY_DATA
}

export const submitForm = async (data: FormState) => {
  // Submit処理
}
```

**app/[screen]/hooks.ts**
```typescript
// カスタムhooks
export const usePageData = () => {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [data, setData] = useState<PageData | null>(null)
  
  // ビジネスロジック
  useEffect(() => {
    fetchPageData().then(setData).catch(setError).finally(() => setLoading(false))
  }, [])
  
  return { data, loading, error }
}
```

**app/[screen]/constants.ts**
```typescript
// 定数・設定値
export const DUMMY_DATA: PageData = {
  // ...
}

export const FORM_VALIDATION_RULES = {
  // ...
}
```

**app/[screen]/page.tsx**
```tsx
// メインコンポーネント（UI表示のみ）
import { usePageData } from './hooks'
import type { PageData } from './types'

export default function ScreenPage() {
  const { data, loading, error } = usePageData()
  
  if (loading) return <div>読み込み中...</div>
  if (error) return <div>エラー: {error}</div>
  
  return (
    <>
      <header className="fixed top-0 w-full bg-white shadow-sm z-50 p-4">
        <h1>画面タイトル</h1>
      </header>
      
      <main className="pt-16 pb-20">
        {/* メインコンテンツ */}
      </main>
      
      <footer className="fixed bottom-0 w-full bg-white border-t p-4">
        <button 
          className="w-full p-3 text-white rounded"
          style={{ backgroundColor: '#2db5a5' }}
        >
          主要アクション
        </button>
      </footer>
    </>
  )
}
```

## MapLibre GL JS 使用時の注意
- 必要最小限の機能のみ使用
- スマートフォンでの操作性を考慮
- パフォーマンスに配慮した実装

### 🗺️ 地図動作の重要な仕様
- **地図の自動初期化禁止**: 地図が勝手に現在地や初期位置にリセットされてはならない
- **ユーザー操作の尊重**: ユーザーがスクロールした位置に地図は留まり続ける必要がある
- **意図的な移動のみ許可**: 以下の場合のみ地図の位置移動が許可される
  - 現在地ボタンのクリック時 → 現在地へ移動
  - エリア選択時 → 選択されたエリアへ移動
  - プラン選択時 → プランの範囲へ移動
- **位置情報更新時の制限**: `watchPosition`による位置情報の継続更新は、現在地マーカーの位置更新のみに使用し、地図のビューポート移動には使用しない
- **useEffect依存関係の注意**: `currentLocation`の変更が地図の自動移動を引き起こさないよう、useEffectの依存関係を慎重に設計する

## 各画面実装時のチェックリスト

### 📁 ファイル構成（新ルール）
- [ ] 1画面＝1ディレクトリで実装されているか
- [ ] 各ファイルがサイズ制限内に収まっているか
  - [ ] page.tsx: 500行以下
  - [ ] hooks.ts: 200行以下
  - [ ] api.ts: 300行以下
  - [ ] types.ts: 100行以下
- [ ] 関心が適切に分離されているか（UI/ロジック/API/型）

### 🎨 UI/UX
- [ ] スマートフォン幅（375-430px）で適切に表示されるか
- [ ] 主要CTAが親指で届く位置にあるか
- [ ] ローディング/エラー状態が実装されているか
- [ ] アクセシビリティ属性が設定されているか
- [ ] 日本語表記になっているか
- [ ] 過度な装飾がないか

### 🗺️ 地図機能（該当画面のみ）
- [ ] 地図の自動初期化が発生しないか確認済み
- [ ] ユーザー操作を尊重した動作になっているか

### 🧪 品質保証
- [ ] TypeScriptエラーがないか
- [ ] ESLintエラーがないか
- [ ] 各ファイルの責務が明確か

### 🔄 責務分離の移行ルール（重要）
**Phase 1: 型定義・定数の移行**
- **一つずつ移行**: 複数の型を同時に移行せず、必ず一つの型ずつ処理する
- **移行後即確認**: 各型移行後は必ずコンパイルエラー・動作確認を行う
- **完了後中止**: 一つの型移行が完了したら必ず作業を中止し、ユーザー確認を待つ
- **段階的実行**: 外側から内側へ（依存関係の少ないものから順に移行）
- **安全第一**: バックアップ保持、既存機能の完全保持を最優先


##操作フロー

#### 1. 地図上のスポットマーカーをタップ
#### 2. 画面下部にスポット情報表示
#### 3. 「ルートに追加」でルートに追加（滞在時間設定可能）
#### 4. 複数スポット追加後、FABボタンで確認画面へ
#### 5. 確認画面で順序調整、日時設定、共有


## 画面要件定義

### ランディングページ（LP）
**目的：** サービス説明から登録不要でホーム画面への誘導

**要件：**
- ヘッダー：ロゴ + サービス名「トモタビ」＋「はじめる」ボタン
- ヒーローセクション：
  - 大きなロゴ（24×24）
  - メインメッセージ：「もう、『どこ行く？どう回る？』で、立ち話が終わらない。」
  - サービス説明文（友達・恋人とのお出かけ問題提起）
  - 「1分でお出かけ・旅行プランを作って友達と共有」価値提案
  - 「無料で始める」CTA（フル幅）
- 問題提起セクション：
  - 「こんな経験、ありませんか？」見出し
  - 3つの課題カード（プラン作成で消耗・共有が面倒・情報が散在）
- ソリューションセクション：
  - 「トモタビで、すべて解決」見出し
  - 3ステップ（1分でプラン作成・友達と簡単共有・現地でナビ機能）
- 特徴セクション：
  - ルートSNS・リミックス機能・地域の案内人説明
  - 「個人の視点で切り取ったまち・旅プランを交換」コンセプト
- 最終CTAセクション：
  - 「さあ、新しい旅をはじめよう」見出し
  - 「登録不要で今すぐ使えます」説明
- フッター：ロゴ + サービス説明 + コピーライト
- 振る舞い：
  - 全てのCTAボタンは `/home` へ遷移
  - フェードインアニメーション
  - レスポンシブ対応（375px〜）

### 画面D：ホーム（地図＋スポット探索＋ルート作成）
**目的：** 地図を見ながらスポットを探索し、ルートに追加していく統合画面

**要件：**
- 上部ヘッダー：「トモタビ」（中央）
- 背景：MapLibre GL JSの全画面地図
  - 現在地ボタン（右上）
  - スポットマーカー表示（複数のPOI情報）
    - 最大20個、画面内のみ、地図移動で更新
- タグバー（地図上部）：
  - 「エリア」選択ボタン：
    - タップでエリア選択シート表示
    - 2段階選択：地方選択→都道府県選択の流れ
    - 地方選択：関東、関西、東海、中国、四国、九州、東北、北海道、沖縄
    - 都道府県選択：選択した地方の都道府県一覧
    - 選択後は選択中の都道府県名表示
  - 「カテゴリー」選択ボタン：
    - タップでカテゴリー選択シート表示
    - 単一選択（1つのカテゴリーのみ選択可能）
    - カテゴリー：自然（木アイコン）、文化・芸術（神社アイコン）、飲食店（食器アイコン）、温泉（温泉アイコン）、お買い物、レジャー施設、宿泊施設
    - 選択時に検索バーにカテゴリー名が自動入力される
  - 「プラン」ボタン：
    - タップでおすすめプラン一覧シート表示
    - CSVデータから100件表示
    - プラン選択可能（別途実装）
- スポット選択時の下部表示：
  - スポット情報カード（下から180px程度スライドイン）：
    - スポット名
    - スポット説明
    - 住所
    - 写真（あれば）
    - 「ルートに追加」ボタン（メインカラー）
  - 背景タップまたは×ボタンでカード非表示
- ルート作成CTA（画面下部固定）：
  - ボタンテキスト：「作ったルートを確認」
  - バッジ：追加済みスポット数表示（例：「3」）
  - 無効状態：スポット0件時はグレーアウト
  - 有効状態：スポット1件以上でメインカラー
  - 画面幅いっぱいの大きなボタン（現在のデザインサイズ維持）
- 振る舞い：
  - スポットマーカータップ→情報カード表示
  - 「ルートに追加」→ルートデータに追加（メモリ保持）
  - 追加済みスポットはマーカー色変更
  - CTAタップ→プラン確認画面へ（データ引き継ぎ）
  - エリア/カテゴリー変更→マーカー更新
  - 「プラン」→既存プラン一覧モーダル表示

### 画面B：プラン詳細（共有リンク着地）
**目的：** 中身をすぐ理解して開始 or 保存 or リミックス

**要件：**
- ヘッダー：←｜ルート名｜（右）共有
- メタ情報エリア：
  - 予定日時（「◯月◯日 ◯時◯分〜」形式）
  - 所要時間（自動計算）
  - 交通手段選択（徒歩・車・電車の横並びアイコンボタン）
    - セレクトボックス廃止、タップエリア拡大
    - 選択中：メインカラー（#2db5a5）で強調
  - 作者名／タグ
- 全画面地図（MapLibre GL JS）：
  - ポリライン＋番号付きマーカー
  - 自動フィット（全スポット表示）
- スポット一覧（地図の下）：
  - 番号／名称／住所／移動時間／滞在時間
  - 集合・解散チップ表示（緑色「集合」、赤色「解散」）
  - 複数日程：日付区切り表示
  - 宿泊：区切り内で表示（番号なし）
- フッターCTA：「このルートで開始」
  - サブ：左「保存」／右「リミックス」
- 振る舞い：
  - マーカータップで該当スポットにスクロール
  - 交通手段変更で移動時間・総所要時間を再計算
  - リンク閲覧はログイン不要で開始可能

### 画面C：ナビ（チェックイン）
**目的：** 「次スポットだけ」に集中し、到着は自動判定

**要件：**
- ヘッダー：←｜ルート名＋進捗(2/5)｜（右）スキップ
- ETAバー（固定）：「次まで ◯m / ◯分」
- 全画面地図（MapLibre GL JS）：
  - 現在区間のみ太線表示
  - 現在地（青）＋目的地（赤）マーカー
  - 現在地追従（followUserLocation: true）
- 下部アクション領域：
  - 到着前：次のスポット情報カード表示
  - 到着時（半径50m内）：CTA「チェックイン」
  - チェックイン後：CTA「写真を追加」（任意、1枚プレビュー）
- 振る舞い：
  - Geolocation API使用（失敗時はダミー座標）
  - 到着判定：50m以内で自動検知
  - スキップ：未達のまま次へ（宿泊・日付区切りも考慮）
  - 写真：端末カメラ or 画像選択
  - 最終到着：完了画面へ自動遷移
  - エラー時：トーストで通知

### 画面E：ルート完了
**目的：** 達成感の提示・作者への拍手・リミックス導線

**要件：**
- 完了アニメーション（紙吹雪エフェクト）
- 大きめの「完了！」メッセージ
- ルート情報：
  - タイトル
  - 総所要時間
  - 完了率（◯/◯スポット）
- 回ったスポット一覧：
  - チェック済みアイコン付き
  - 写真がある場合はサムネイル表示
- アクションボタン：
  - 「作者に拍手を送る」（メインカラー）
  - 「このルートをリミックス」
  - 「ホームへ戻る」
- 振る舞い：
  - 拍手：アニメーション＋「送信しました」トースト
  - リミックス：ホーム画面へ（データコピー済み）
  - ホーム：home画面へ遷移

### 画面F：ルート確認（共有前）
**目的：** 作成したルートの最終確認と共有リンク生成

**要件：**
- ヘッダー：←｜ルート確認
- ルート情報入力エリア：
  - ルート名（必須）
  - 予定日時（日にち・時・分の3列カスタムプルダウン）
  - メモ（任意、140字）
- 内容：プラン詳細画面と同じレイアウト
  - メタ情報（所要時間/交通手段）
    - 所要時間：自動計算（グレー背景）
    - 交通手段：アイコンボタン式、メインカラー強調
  - 全画面地図
  - スポット一覧
    - 集合・解散チップ表示
    - 順序変更機能（ドラッグ&ドロップ）
    - 削除機能（×ボタン）
    - 滞在時間変更機能
- フッターCTA：「共有リンクを作成」
- 共有ダイアログ：
  - リンクURL表示
    - 入力フィールド：min-w-0、text-ellipsis
    - コピーボタン：flex-shrink-0、min-w-[64px]
    - iPhone14で1行表示保証
  - 共有方法選択（LINE/X/その他）
  - 「リンクをコピーしました」トースト
- 振る舞い：
  - 交通手段変更可能
  - スポット順序・滞在時間変更で再計算
  - 共有後：ホーム画面へ遷移
  - URL形式：`/route/[id]`

## 共有コンポーネント

### PrimaryButton
- フル幅、固定フッター対応
- 無効状態のスタイル

### Toast
- 成功/エラー表示
- 3秒後自動消去

## モックAPI/型定義

### 型定義
```typescript
type Spot = {
  id: string
  name: string
  lat: number
  lng: number
  photo?: string
  comment?: string
  stayTime?: number // 滞在時間（分）
  address?: string // 住所
  isLodging?: boolean // 宿泊施設フラグ
}

type Route = {
  id: string
  title: string
  duration: string // 自動計算された文字列（例："2時間30分"）
  tags: string[]
  author: string
  cover?: string
  spots: Spot[]
  memo?: string
  shareLink?: string
  isPublic?: boolean
  scheduledDate?: string // YYYY-MM-DD
  scheduledHour?: number // 0-23
  scheduledMinute?: number // 0 or 30
  dayBreaks?: number[] // 複数日程の区切り位置
  transportMode?: 'walking' | 'driving' | 'transit' // 交通手段
}
```

### API関数
- `listRecommendedRoutes(filters?): Promise<Route[]>` - おすすめルート一覧（CSVデータ含む）
- `getRoute(id): Promise<Route>` - ルート詳細取得
- `createShareLink(route): Promise<{id:string, shareLink:string}>` - 共有リンク作成
- `saveRoute(route): Promise<{id:string}>` - ルート保存
- `publishRoute(id): Promise<void>` - ルート一般公開
- `sendApplause(id): Promise<void>` - 拍手送信
- `publishRemix(route): Promise<{id:string}>` - リミックス公開
- `searchSpots(query, options?): Promise<Spot[]>` - スポット検索（現在地/エリア/カテゴリー）
- `calculateRoute(spots, mode): Promise<{distance, duration}>` - 経路計算
- `reverseGeocode(lat, lng): Promise<string>` - 座標から住所取得

### 画面G：ユーザープロフィール（未実装）
**目的：** ユーザーのプロフィール情報と作成・完了したルートを表示

**要件：**
- ヘッダー：←｜プロフィール｜（右）設定
- プロフィール情報：
  - 丸型アバター
  - 表示名
  - @ユーザーID
  - 自己紹介文
- 統計情報：
  - 作成ルート数
  - 完了ルート数
  - フォロワー数
  - フォロー中数
- アクションボタン：
  - 自分：「プロフィールを編集」
  - 他人：「フォロー」/「フォロー中」トグル
- タブ切り替え：
  - 作成したルート
  - 完了したルート
  - いいねしたルート
- ルート一覧：
  - カード形式（サムネイル/タイトル/所要時間/いいね数）
  - タップで詳細画面へ

## 開発環境

### 開発サーバー
- **基本ルール**: 開発サーバーは基本的に開きっぱなしで運用する
- **新規起動禁止**: 既にサーバーが動いている場合は新たに`npm run dev`を実行しない
- **確認方法**: `ps aux | grep next`でプロセス確認後に判断する
- **必要時のみ再起動**: エラーや設定変更時のみサーバーを再起動する

---

## 📝 変更履歴

### 2025-08-24: ファイル設計原則の大幅改訂

#### 1. 「1ファイル→1ディレクトリ完結型」への移行 ⚠️ **実装移行中**
- **変更前**: 1画面＝1ファイル完結型設計
- **変更後**: 1画面＝1ディレクトリ完結型設計
- **理由**: ファイルサイズ肥大化（home/page.tsx: 2,965行）による保守性問題
- **ステータス**: ルール策定完了、実装は段階的に進行予定
- **移行スケジュール**:
  - **🔴 緊急対応（1000行超）**: home (2,965行), checkin (1,344行)
  - **🟡 分割推奨（500-1000行）**: profile (885行), plan/preview (735行), route/create (702行)
  - **✅ 適正サイズ（500行未満）**: その他8画面は現行維持
- **重要**: 明示的な指示なしに既存ファイルの分割を行わない

#### 2. ファイルサイズ制限の導入
- **メインコンポーネント**: 500行以下
- **カスタムhooks**: 200行以下  
- **API関数**: 300行以下
- **型定義**: 100行以下

#### 3. 関心の分離強化
- UI表示ロジック（page.tsx）
- ビジネスロジック（hooks.ts）
- データ取得・操作（api.ts）
- 型定義・定数（types.ts, constants.ts）

#### 4. 新ディレクトリ構造の標準化
```
app/[screen]/
├── page.tsx        // メインコンポーネント
├── hooks.ts        // カスタムhooks
├── api.ts          // API関数
├── types.ts        // 型定義
├── constants.ts    // 定数・設定
└── utils.ts        // ユーティリティ（必要時）
```

### 2025-08-23: プラン作成フローの根本的変更

### 主要な変更点

#### 1. プラン作成フローの根本的変更
- **削除**: 画面A（プラン作成画面）を完全削除
- **変更**: ホーム画面で地図を見ながらスポットを逐次追加する方式に変更
- **理由**: より直感的でシームレスなルート作成体験の実現

#### 2. ホーム画面（画面D）の大幅改修
**削除された要素**:
- ボトムシート（おすすめルート表示）
- 条件絞り込みバー
- ルートマーカー表示

**新規追加された要素**:
- スポットマーカー表示（最大20個）
- タグバー（エリア・カテゴリー・プラン）
- スポット情報カード（下部スライドイン）
- ルート作成CTA（画面下部固定・現在のサイズ維持）

**変更された要素**:
- FABボタン → 画面下部固定CTAボタンに変更
- ボタンテキスト：「＋」→「作ったルートを確認」
- 地図領域：ボトムシート削除により大幅拡大

#### 3. データフローの変更
- ルート作成データをホーム画面でセッション管理（メモリ保持）
- 確認画面への遷移時にデータ引き継ぎ

#### 4. UI/UXの改善
- 地図中心のインターフェースに変更
- スポット探索とルート作成を統合
- よりシンプルで直感的な操作フロー

### 影響を受ける画面
- **削除**: 画面A（プラン作成）
- **大幅変更**: 画面D（ホーム）
- **名称変更**: 画面F（プラン確認→ルート確認）
- **維持**: 画面B, C, E（軽微な調整のみ）

### Claude Code向け変更サマリー
```
変更前：
- 専用のプラン作成画面でルート作成
- ホーム画面はルート閲覧中心
- ボトムシートでおすすめルート表示
- FABボタンで新規作成

変更後：
- ホーム画面でスポット追加してルート作成
- 地図上のスポットマーカーから選択
- タグバーで絞り込み（エリア/カテゴリー/プラン）
- 画面下部固定CTAで確認画面へ遷移
```
